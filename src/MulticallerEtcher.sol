// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

import "./Multicaller.sol";
import "./MulticallerWithSender.sol";
import "./MulticallerWithSigner.sol";
import "./LibMulticaller.sol";

/**
 * @title LibMulticaller
 * @author vectorized.eth
 * @notice Library for etching the multicaller contracts for testing in Foundry forge.
 * It uses the VM cheatcodes to etch the multicaller contracts and initialize their storage.
 * Not to be used on an actual EVM chain.
 */
library MulticallerEtcher {
    // =============================================================
    //                           CONSTANTS
    // =============================================================

    /**
     * @dev The initcode for the multicaller.
     */
    bytes internal constant MULTICALLER_INITCODE =
        hex"60808060405234610016576102b9908161001c8239f35b600080fdfe60806040526004361015610015575b366101fd57005b6000803560e01c63991f255f1461002c575061000e565b60803660031901126100aa5767ffffffffffffffff6004358181116100b5576100599036906004016100b9565b916024358181116100b1576100729036906004016100b9565b916044359081116100ad5761008b9036906004016100b9565b6064359690959194906001600160a01b03881688036100aa57506100ef565b80fd5b8580fd5b8480fd5b8280fd5b9181601f840112156100ea5782359167ffffffffffffffff83116100ea576020808501948460051b0101116100ea57565b600080fd5b959390949295606093871487871416156101f0578693604097610166575b505050505080610125575b5060206000526020526000f35b47156101185733811860018214021860003881804785620186a0f1610118576000526073600b5360ff6020536016600b47f0156101625738610118565b3838fd5b8794919395979160051b9384878737848601945b835188019087810182359081602080950182376000808093838a8c603f19918291010135908c8b0101355af1156101e7578287523d90523d908583013e603f601f19913d010116930196898689146101d45750969261017a565b975050505091505001923880808061010d565b503d81803e3d90fd5b633b800a463d526004601cfd5b3d356366e0daa08160e01c14610211573d3dfd5b193d5260043d815b36811061023a57600080808581305af43d82803e15610236573d90f35b3d90fd5b8035821a92600180920193801561025757815301905b9091610219565b503d19815283820193607f90353d1a81811115610278575b16010190610250565b83810138843961026f56fea26469706673582212200dfa3a85cbd068a99fd4d5051615c4bde5995f9e1dd4a095bb55fc5af681c44064736f6c63430008120033";

    /**
     * @dev The salt for the multicaller to be deployed via
     *      0age's immutable create2 factory.
     */
    bytes32 internal constant MULTICALLER_CREATE2_SALT =
        0x0000000000000000000000000000000000000000ef4834b251a91000a916248a;

    /**
     * @dev The initcode for the multicaller with sender.
     */
    bytes internal constant MULTICALLER_WITH_SENDER_INITCODE =
        hex"60806040819052600160a01b3d55610247908161001a8239f3fe60406080815260049081361015610023575b5050361561001e57600080fd5b6101f2565b600091823560e01c63d985f1e81461003b5750610011565b606090817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101b85767ffffffffffffffff81358181116101b45761008690369084016101bc565b916024358181116101b05761009e90369086016101bc565b9590936044359283116101ac576100b98793369088016101bc565b9390938114911416156101a0577401000000000000000000000000000000000000000094853d5416156101955750602090813d52868252861561019157333d55929560051b93919287929185838537858901955b84518401988b80848d85019c8d81359283920190378c8a3585355af115610188577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe091838080603f9401990197828152019a3d90523d8d8683013e3d010116928689101561017f57929793949761010d565b878b55838a018bf35b8b3d81803e3d90fd5b873df35b63ab143c063d52601cfd5b84633b800a463d52601cfd5b8880fd5b8780fd5b8580fd5b8380fd5b9181601f840112156101ed5782359167ffffffffffffffff83116101ed576020808501948460051b0101116101ed57565b600080fd5b3d5473ffffffffffffffffffffffffffffffffffffffff163d5260203df3fea2646970667358221220802fc1f04a279628c77438e5942439f44c7eaf734a7dca754fef889a35be139764736f6c63430008120033";

    /**
     * @dev The salt for the multicaller with sender to be deployed via
     *      0age's immutable create2 factory.
     */
    bytes32 internal constant MULTICALLER_WITH_SENDER_CREATE2_SALT =
        0x00000000000000000000000000000000000000006bfa48b413e5be01a8e9fe0c;

    /**
     * @dev The initcode for the multicaller with signer.
     */
    bytes internal constant MULTICALLER_WITH_SIGNER_INITCODE =
        hex"60808060405260013d55610a5d90816100168239f3fe6040608081526004361015610020575b50361561001b57600080fd5b610783565b6000803560e01c91826317447cf1146100aa57505080632eb48a80146100a55780633aeb2206146100a057806356b1a87f1461009b57806384b0196e1461009657806387ec11ca14610091578063ad3aacb81461008c5763f0c60f1a14610087573861000f565b61072d565b61069d565b6104a1565b61044c565b61028f565b61023e565b6101a3565b346101275780600319360112610127576100c261012b565b9060243567ffffffffffffffff8111610123576100e3903690600401610172565b909284528060051b92845b848103610102575050602084526020520190f35b80602091830135808352603f8820549060ff161c60011681860152016100ee565b8380fd5b5080fd5b600435906001600160a01b038216820361014157565b600080fd5b602435906001600160a01b038216820361014157565b608435906001600160a01b038216820361014157565b9181601f840112156101415782359167ffffffffffffffff8311610141576020808501948460051b01011161014157565b34610141576020806003193601126101415760043567ffffffffffffffff8111610141576101d5903690600401610172565b6000913383528160051b91835b83810361021f5750848495849552526040377fc45e3a0dd412bcad8d62398d74d66b1c8449f38beb10da275e4da0c6d3a811a4339160400183a280f35b8086918401358083526001603f88209160ff161b8154179055016101e2565b346101415760203660031901126101415761025761012b565b3001543d5260203df35b9181601f840112156101415782359167ffffffffffffffff8311610141576020838186019501011161014157565b34610141576040366003190112610141576102a861012b565b60243567ffffffffffffffff8111610141576102c8903690600401610261565b9190308201908154907f898da98c106c91ce6f05405740b0ed23b5c4dc847a0dd1996fb93189d8310bef3d5260209482865260403d206040527f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6060527f301013e8a31863902646dc218ecd889c37491c2967a8104d5ff1cf42af0f9ea46080527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660a0524660c0523060e05260a060602086526119013d52856042601e209160009360418214610429575b84156103ef575b50505050156103e15760019060001943014060e01c01018091556000527f997a42216df16c8b9e7caf2fc71c59dba956f1f2b12320f87a80a5879464217d826000a26000f35b638baa579f6000526004601cfd5b6024929394509080606492630b135d3f60e11b968760005260045260408552816044528337016000875afa9060245114163885818061039b565b93600160808492863d52848860403781513d1a8452825afa5187143d0293610394565b3461014157600036600319011261014157600f3d5360e060205275154d756c746963616c6c6572576974685369676e657260f55261012060405261013161012152466060523060805261016060c0526101803df35b346101415760603660031901126101415767ffffffffffffffff600435818111610141576104d3903690600401610172565b6104de929192610146565b91604435908111610141576104f7903690600401610261565b90938260051b927fe75b4aefef1358e66ac7ed2f180022e0a7f661dcd2781630ce58e05bb8bdb1c13d526020958483883784872087523086015493604094855260603d2085527f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f6060527f301013e8a31863902646dc218ecd889c37491c2967a8104d5ff1cf42af0f9ea46080527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660a0524660c0523060e05260a060602088526119013d52876042601e20916000936041821461067b575b8415610642575b50505050156103e1578460005260005b8481036106225750908391867fc45e3a0dd412bcad8d62398d74d66b1c8449f38beb10da275e4da0c6d3a811a49697600052528237016000a2005b8087918401358083526001603f6000209160ff161b8154179055016105e7565b6024929394509080606492630b135d3f60e11b9687600052600452898552816044528337016000895afa906024511416388781806105d7565b93600160808492863d5284888c3781513d1a8452825afa5189143d02936105d0565b60c03660031901126101415767ffffffffffffffff600435818111610141576106ca903690600401610172565b9091602435818111610141576106e4903690600401610172565b604494919435838111610141576106ff903690600401610172565b9161070861015c565b9460a43590811161014157610721903690600401610261565b9790966064359561078d565b3461014157600080600319360112610780576020903033016001815460001943014060e01c01018091558152337f997a42216df16c8b9e7caf2fc71c59dba956f1f2b12320f87a80a5879464217d8383a2f35b80fd5b3d54600c5260203df35b97919490969298959860609181148189141615610a1a573d5460011615610a0d5760051b9283853d37833d20993d5b8581036109f15750843d2093858b3d37853d207f7d4195b902a78aa23ae8c64d4cecdf8424f3171e7c7e34ed94e6fab3efd018ab3d526020998a91825260409d8e9788528652836080523085015460a05260c03d2087527f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f86527f301013e8a31863902646dc218ecd889c37491c2967a8104d5ff1cf42af0f9ea46080527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660a0524660c0523060e05260a0862082526119013d526042601e2092600097604183146109cf575b8815610993575b50505083915052808b52603f9384892091600183549160ff161b918183169015176103e1571790558660005260018752807fc45e3a0dd412bcad8d62398d74d66b1c8449f38beb10da275e4da0c6d3a811a4836000a2831561098b57819895981b600055889280898b37808a01955b8a6000808a8d89510193860193803591829101853783603f19808b8d010135908b880101355af115610981578289918d9488523d90523d60008683013e85601f19913d010116950199878b146109725799949150610919565b82868b8b526001600055016000f35b3d6000803e3d6000fd5b898488526000f35b60249394959850918091606493630b135d3f60e11b97886000526004528552816044528337016000855afa90602451141692388881808e6108aa565b97600160808592873d5285858d3781513d1a8452825afa5186143d02976108a3565b80602080928a01358a01803591829101833781208152016107bc565b63ab143c063d526004601cfd5b633b800a463d526004601cfdfea2646970667358221220b8de01d46ec7716c4271aa1bbc40baf8fa8bca536b5923f361c16810a8e7ffed64736f6c63430008120033";

    /**
     * @dev The salt for the multicaller with signer to be deployed via
     *      0age's immutable create2 factory.
     */
    bytes32 internal constant MULTICALLER_WITH_SIGNER_CREATE2_SALT =
        0x00000000000000000000000000000000000000008464708f40b03f03ab30866f;

    // =============================================================
    //                          OPERATIONS
    // =============================================================

    /**
     * @dev Returns the multicaller.
     */
    function multicaller() internal returns (Multicaller deployment) {
        address expectedDeployment = LibMulticaller.MULTICALLER;
        if (_extcodesize(expectedDeployment) == 0) {
            bytes32 salt = MULTICALLER_CREATE2_SALT;
            address d = _safeCreate2(salt, MULTICALLER_INITCODE);
            require(d == expectedDeployment, "Unable to etch Multicaller.");
            deployment = Multicaller(payable(d));
        }
    }

    /**
     * @dev Returns the multicaller with sender.
     */
    function multicallerWithSender() internal returns (MulticallerWithSender deployment) {
        address expectedDeployment = LibMulticaller.MULTICALLER_WITH_SENDER;
        if (_extcodesize(expectedDeployment) == 0) {
            bytes32 salt = MULTICALLER_WITH_SENDER_CREATE2_SALT;
            address d = _safeCreate2(salt, MULTICALLER_WITH_SENDER_INITCODE);
            require(d == expectedDeployment, "Unable to etch MulticallerWithSender.");
            deployment = MulticallerWithSender(payable(d));
        }
    }

    /**
     * @dev Returns the multicaller with signer.
     */
    function multicallerWithSigner() internal returns (MulticallerWithSigner deployment) {
        address expectedDeployment = LibMulticaller.MULTICALLER_WITH_SIGNER;
        if (_extcodesize(expectedDeployment) == 0) {
            bytes32 salt = MULTICALLER_WITH_SIGNER_CREATE2_SALT;
            address d = _safeCreate2(salt, MULTICALLER_WITH_SIGNER_INITCODE);
            require(d == expectedDeployment, "Unable to etch MulticallerWithSigner.");
            deployment = MulticallerWithSigner(payable(d));
        }
    }

    // =============================================================
    //                        PRIVATE HELPERS
    // =============================================================

    /**
     * @dev Deploys a contract via 0age's immutable create 2 factory for testing.
     */
    function _safeCreate2(bytes32 salt, bytes memory initializationCode)
        private
        returns (address deployment)
    {
        // Canonical address of 0age's immutable create 2 factory.
        address c2f = 0x0000000000FFe8B47B3e2130213B802212439497;
        if (_extcodesize(c2f) == 0) {
            bytes memory ic2fBytecode =
                hex"60806040526004361061003f5760003560e01c806308508b8f1461004457806364e030871461009857806385cf97ab14610138578063a49a7c90146101bc575b600080fd5b34801561005057600080fd5b506100846004803603602081101561006757600080fd5b503573ffffffffffffffffffffffffffffffffffffffff166101ec565b604080519115158252519081900360200190f35b61010f600480360360408110156100ae57600080fd5b813591908101906040810160208201356401000000008111156100d057600080fd5b8201836020820111156100e257600080fd5b8035906020019184600183028401116401000000008311171561010457600080fd5b509092509050610217565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561014457600080fd5b5061010f6004803603604081101561015b57600080fd5b8135919081019060408101602082013564010000000081111561017d57600080fd5b82018360208201111561018f57600080fd5b803590602001918460018302840111640100000000831117156101b157600080fd5b509092509050610592565b3480156101c857600080fd5b5061010f600480360360408110156101df57600080fd5b508035906020013561069e565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205460ff1690565b600083606081901c33148061024c57507fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008116155b6102a1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260458152602001806107746045913960600191505060405180910390fd5b606084848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920182905250604051855195965090943094508b93508692506020918201918291908401908083835b6020831061033557805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe090920191602091820191016102f8565b51815160209384036101000a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018019909216911617905260408051929094018281037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00183528085528251928201929092207fff000000000000000000000000000000000000000000000000000000000000008383015260609890981b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016602183015260358201969096526055808201979097528251808203909701875260750182525084519484019490942073ffffffffffffffffffffffffffffffffffffffff81166000908152938490529390922054929350505060ff16156104a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603f815260200180610735603f913960400191505060405180910390fd5b81602001825188818334f5955050508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161461053a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260468152602001806107b96046913960600191505060405180910390fd5b50505073ffffffffffffffffffffffffffffffffffffffff8116600090815260208190526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790559392505050565b6000308484846040516020018083838082843760408051919093018181037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001825280845281516020928301207fff000000000000000000000000000000000000000000000000000000000000008383015260609990991b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000166021820152603581019790975260558088019890985282518088039098018852607590960182525085519585019590952073ffffffffffffffffffffffffffffffffffffffff81166000908152948590529490932054939450505060ff909116159050610697575060005b9392505050565b604080517fff000000000000000000000000000000000000000000000000000000000000006020808301919091523060601b6021830152603582018590526055808301859052835180840390910181526075909201835281519181019190912073ffffffffffffffffffffffffffffffffffffffff81166000908152918290529190205460ff161561072e575060005b9291505056fe496e76616c696420636f6e7472616374206372656174696f6e202d20636f6e74726163742068617320616c7265616479206265656e206465706c6f7965642e496e76616c69642073616c74202d206669727374203230206279746573206f66207468652073616c74206d757374206d617463682063616c6c696e6720616464726573732e4661696c656420746f206465706c6f7920636f6e7472616374207573696e672070726f76696465642073616c7420616e6420696e697469616c697a6174696f6e20636f64652ea265627a7a723058202bdc55310d97c4088f18acf04253db593f0914059f0c781a9df3624dcef0d1cf64736f6c634300050a0032";
            /// @solidity memory-safe-assembly
            assembly {
                let m := mload(0x40)
                mstore(m, 0xb4d6c782) // `etch(address,bytes)`.
                mstore(add(m, 0x20), c2f)
                mstore(add(m, 0x40), 0x40)
                let n := mload(ic2fBytecode)
                mstore(add(m, 0x60), n)
                for { let i := 0 } lt(i, n) { i := add(0x20, i) } {
                    mstore(add(add(m, 0x80), i), mload(add(add(ic2fBytecode, 0x20), i)))
                }
                let vmAddress := 0x7109709ECfa91a80626fF3989D68f67F5b1DD12D
                if iszero(call(gas(), vmAddress, 0, add(m, 0x1c), add(n, 0x64), 0x00, 0x00)) {
                    revert(0, 0)
                }
            }
        }
        /// @solidity memory-safe-assembly
        assembly {
            let m := mload(0x40)
            let n := mload(initializationCode)
            mstore(m, 0x64e03087) // `safeCreate2(bytes32,bytes)`.
            mstore(add(m, 0x20), salt)
            mstore(add(m, 0x40), 0x40)
            mstore(add(m, 0x60), n)
            // prettier-ignore
            for { let i := 0 } lt(i, n) { i := add(i, 0x20) } {
                mstore(add(add(m, 0x80), i), mload(add(add(initializationCode, 0x20), i)))
            }
            if iszero(call(gas(), c2f, 0, add(m, 0x1c), add(n, 0x64), m, 0x20)) {
                returndatacopy(m, m, returndatasize())
                revert(m, returndatasize())
            }
            deployment := mload(m)
        }
    }

    /**
     * @dev Returns the extcodesize of `deployment`.
     */
    function _extcodesize(address deployment) private view returns (uint256 result) {
        /// @solidity memory-safe-assembly
        assembly {
            result := extcodesize(deployment)
        }
    }
}
